#
# SCons build script for HLIBpro
#

import SCons
import os
import platform
import re

############################################################
#
# compiler, compilation flags, optional libraries and 
# other settings
#

top_dir       = os.getcwd()
lib_dir       = os.path.join( top_dir, 'lib' )

version       = '2.7'

cc            = 'clang'
cxx           = 'clang++ -std=c++11 -stdlib=libc++'
fc            = 'gfortran'

ccflags       = Split( '-mtune=generic' )
cxxflags      = Split( '-mtune=generic' )
fcflags       = Split( '-mtune=generic' )
defines       = Split( 'DARWIN' )
debug         = Split( '-g' )
optim         = Split( '-O2' )
profile       = Split( '-pg' )
lflags        = Split( '-stdlib=libc++ -lm -lz -Wl,-framework,Accelerate' )

lapack        = '-Wl,-framework,Accelerate'

tbb_dir       = ''
tbb_cflags    = '-I' + tbb_dir + '/include'
tbb_lflags    = '-L' + tbb_dir + '/lib -ltbb'

boost_dir     = ''
boost_cflags  = '-I' + boost_dir + '/include'
boost_lflags  = '-L' + boost_dir + '/lib -lboost_filesystem -lboost_iostreams -lboost_system -lboost_program_options'

metis         = 'no'
metis_dir     = ''
metis_cflags  = '-I' + metis_dir + '/include'
metis_lflags  = '-L' + metis_dir + '/lib -lmetis -lm'

zlib          = 'yes'
zlib_cflags   = ''
zlib_lflags   = '-lz'

hdf5          = 'no'
hdf5_cflags   = '-I/usr/include/hdf5/serial'
hdf5_lflags   = '-L/usr/lib/x86_64-linux-gnu/hdf5/serial -lhdf5 -lhdf5_cpp'

gsl           = 'yes'
gsl_cflags    = ''
gsl_lflags    = '-lgsl -lgslcblas'

cxxlibs       = '-lstdc++'

# cache file storing SCons settings
cache_file    = 'options.cache'

############################################################
#
# Help Text
#

Help( """
Type
  'scons'            to build HLIBpro and all examples.
  'scons options'    to get help on command line build parameters.
  'scons install'    to install HLIBpro in the chosen directory.
  'scons doc'        to create documentation for HLIBpro.
  'scons distclean'  to remove HLIBpro and all files created during compilation.
  'scons dist'       to create tar archive of HLIBpro.
""" )

############################################################
#
# determine system
#

system = platform.system()

if system in ( 'Microsoft', 'MSWin32', 'MSWin64' ):
    system = 'Windows'

############################################################
#
# eval options
#

opts = Variables( cache_file )
opts.Add( BoolVariable( 'fullmsg',  'set to enable full output',                        0 ) )
opts.Add( BoolVariable( 'debug',    'set to enable building with debug informations',   0 ) )
opts.Add( BoolVariable( 'profile',  'set to enable building with profile informations', 0 ) )
opts.Add( BoolVariable( 'optimise', 'set to enable building with optimisation',         1 ) )
if system == 'Windows':
    opts.Add( BoolVariable( 'shared', 'set to enable building of shared libraries',   1 ) )
    opts.Add( BoolVariable( 'static', 'set to enable building of static libraries',   0 ) )
else:
    opts.Add( BoolVariable( 'shared', 'set to enable building of shared libraries',   0 ) )
    opts.Add( BoolVariable( 'static', 'set to enable building of static libraries',   1 ) )

# read options from cache_file
opt_env = Environment( options = opts )

############################################################
#
# define environment
#

# prevent warning about mixing of C++ and Fortran
SetOption( 'warn', 'no-fortran-cxx-mix' )

# define base and derived environments
base_env = Environment( options         = opts,
                        ENV             = os.environ,
                        CC              = cc,
                        CXX             = cxx,
                        FORTRAN         = fc,
                        CPPDEFINES      = defines )

if not opt_env['fullmsg'] :
    base_env.Replace( CCCOMSTR        = " CC     $SOURCES" )
    base_env.Replace( SHCCCOMSTR      = " CC     $SOURCES" )
    base_env.Replace( CXXCOMSTR       = " C++    $SOURCES" )
    base_env.Replace( SHCXXCOMSTR     = " C++    $SOURCES" )
    base_env.Replace( FORTRANCOMSTR   = " FC     $SOURCES" )
    base_env.Replace( SHFORTRANCOMSTR = " FC     $SOURCES" )
    base_env.Replace( LINKCOMSTR      = " Link   $TARGET"  )
    base_env.Replace( SHLINKCOMSTR    = " Link   $TARGET"  )
    base_env.Replace( ARCOMSTR        = " AR     $TARGET"  )
    base_env.Replace( RANLIBCOMSTR    = " Index  $TARGET"  )
    base_env.Replace( INSTALLSTR      = " Install   $TARGET" )

# add flags for specific compilation modes
if base_env['profile']:
    base_env.Append( CFLAGS       = profile )
    base_env.Append( CXXFLAGS     = profile )
    base_env.Append( FORTRANFLAGS = profile )
    base_env.Append( LINKFLAGS    = profile )

if base_env['debug']:
    base_env.Append( CFLAGS       = debug )
    base_env.Append( CXXFLAGS     = debug )
    base_env.Append( FORTRANFLAGS = debug )
    base_env.Append( LINKFLAGS    = debug )

if base_env['optimise']:
    base_env.Append( CFLAGS       = optim )
    base_env.Append( CXXFLAGS     = optim )
    base_env.Append( FORTRANFLAGS = optim )
    base_env.Append( CPPDEFINES   = [ 'NDEBUG' ] )

# have to put this after optimisation since some compilers
# redefine architecture in optimisation, e.g. "-fast"
base_env.Append( CFLAGS       = ccflags )
base_env.Append( CXXFLAGS     = cxxflags )
base_env.Append( FORTRANFLAGS = fcflags )

# static overwrites shared
if base_env['static']:
    base_env['shared'] = 0

hlibpro_env = base_env.Clone()
noopt_env   = base_env.Clone()
example_env = base_env.Clone()
doc_env     = base_env.Clone()

if system == 'Windows' or system == 'Darwin' :
    hlibpro_env.MergeFlags( lflags )
example_env.MergeFlags( lflags )

# add downloaded LAPACK or given LAPACK
if lapack == 'DOWNLOAD':
    if system == 'Windows':
        hlibpro_env.Append( LIBPATH = [ '#lapack' ] )
        hlibpro_env.Append( LIBS    = [ 'lapack' ] )
    example_env.Append( LIBPATH = [ '#lapack' ] )
    example_env.Append( LIBS    = [ 'lapack' ] )
else:
    # not yet handled by SCons
    if re.findall( 'sunperf', lapack ) != []:
        if system == 'Windows':
            hlibpro_env.Append( LINKFLAGS = lapack )
        example_env.Append( LINKFLAGS = lapack )
    elif re.findall( '-mkl', lapack ) != []:
        if system == 'Windows':
            hlibpro_env.Append( LINKFLAGS = lapack )
        example_env.Append( LINKFLAGS = lapack )
    else:
        if system == 'Windows':
            hlibpro_env.MergeFlags( lapack )
        example_env.MergeFlags( lapack )

# add TBB
if system == 'Windows':
    hlibpro_env.MergeFlags( tbb_cflags + ' ' + tbb_lflags )
else:
    hlibpro_env.MergeFlags( tbb_cflags )
example_env.MergeFlags( tbb_cflags + ' ' + tbb_lflags )

# add Boost
if system == 'Windows':
    hlibpro_env.MergeFlags( boost_cflags + ' ' + boost_lflags )
else:
    hlibpro_env.MergeFlags( boost_cflags )
example_env.MergeFlags( boost_cflags + ' ' + boost_lflags )

# add zlib
if zlib == 'yes':
    if system == 'Windows':
        hlibpro_env.MergeFlags( zlib_cflags + ' ' + zlib_lflags )
    else:
        hlibpro_env.MergeFlags( zlib_cflags )
    example_env.MergeFlags( zlib_cflags + ' ' + zlib_lflags )

# add METIS
if metis == 'yes':
    if system == 'Windows':
        hlibpro_env.MergeFlags( metis_cflags + ' ' + metis_lflags )
    else:
        hlibpro_env.MergeFlags( metis_cflags )
    example_env.MergeFlags( metis_cflags + ' ' + metis_lflags )

# add HDF5
if hdf5 == 'yes':
    if system == 'Windows':
        hlibpro_env.MergeFlags( hdf5_cflags + ' ' + hdf5_lflags )
    else:
        hlibpro_env.MergeFlags( hdf5_cflags )
    example_env.MergeFlags( hdf5_cflags + ' ' + hdf5_lflags )

# add GSL
if gsl == 'yes':
    if system == 'Windows':
        hlibpro_env.MergeFlags( gsl_cflags + ' ' + gsl_lflags )
    else:
        hlibpro_env.MergeFlags( gsl_cflags )
    example_env.MergeFlags( gsl_cflags + ' ' + gsl_lflags )

# now destinct between C and C++ environement in examples
example_cenv   = example_env.Clone()
example_cxxenv = example_env.Clone()

# append C++ libraries to C environemtn
example_cenv.MergeFlags( cxxlibs )

# in case the C linker needs information about architecture
example_cenv.Append(   LINKFLAGS = ccflags )
example_cxxenv.Append( LINKFLAGS = ccflags )

# export environments and additional options
Export( 'base_env' )
Export( 'hlibpro_env' )
Export( 'example_cenv' )
Export( 'example_cxxenv' )

Export( 'lapack' )

#
# save options
#

opts.Save( cache_file, base_env )

############################################################
#
# define subdirectories and collect source files
#

subdirs = [ 'examples' ]

for subdir in subdirs:
    SConscript( '%s/SConscript' % subdir )

############################################################
#
# Target: options
#

#
# print options
#
def show_options ( target, source, env ):
    print()
    print( 'Type  \'scons <option>=<value> ...\'  where <option> is one of' )
    print()
    print( '  Option   | Description                                       | Value' )
    print( ' ----------+---------------------------------------------------+-------' )
    print( '  fullmsg  | enable/disable full output                        |', opt_env['fullmsg'] )
    print( '  debug    | enable/disable building with debug informations   |', opt_env['debug'] )
    print( '  profile  | enable/disable building with profile informations |', opt_env['profile'] )
    print( '  optimise | enable/disable building with optimisation         |', opt_env['optimise'] )
    print( '  static   | enable/disable building of static libraries       |', opt_env['static'] )
    print( '  shared   | enable/disable building of shared libraries       |', opt_env['shared'] )
    print()

options_cmd = base_env.Command( 'phony-target-options', None, show_options )
base_env.Alias( 'options', options_cmd )


