# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


#
# Copyright (c) 2016-2020 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


__all__ = ["task_arena", "task_group", "task_scheduler_init", "global_control", "default_num_threads"]



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _api
else:
    import _api

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _api.SWIG_PyInstanceMethod_New
_swig_new_static_method = _api.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


_concurrency_barrier = _api._concurrency_barrier
class task_scheduler_init(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    automatic = _api.task_scheduler_init_automatic
    deferred = _api.task_scheduler_init_deferred

    def __init__(self, *args):
        _api.task_scheduler_init_swiginit(self, _api.new_task_scheduler_init(*args))
    __swig_destroy__ = _api.delete_task_scheduler_init
    initialize = _swig_new_instance_method(_api.task_scheduler_init_initialize)
    terminate = _swig_new_instance_method(_api.task_scheduler_init_terminate)
    default_num_threads = _swig_new_static_method(_api.task_scheduler_init_default_num_threads)
    is_active = _swig_new_instance_method(_api.task_scheduler_init_is_active)
    blocking_terminate = _swig_new_instance_method(_api.task_scheduler_init_blocking_terminate)

# Register task_scheduler_init in _api:
_api.task_scheduler_init_swigregister(task_scheduler_init)
task_scheduler_init_default_num_threads = _api.task_scheduler_init_default_num_threads

class task_arena(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    automatic = _api.task_arena_automatic
    current_thread_index = _swig_new_static_method(_api.task_arena_current_thread_index)

    def __init__(self, *args):
        _api.task_arena_swiginit(self, _api.new_task_arena(*args))
    __swig_destroy__ = _api.delete_task_arena
    initialize = _swig_new_instance_method(_api.task_arena_initialize)
    terminate = _swig_new_instance_method(_api.task_arena_terminate)
    is_active = _swig_new_instance_method(_api.task_arena_is_active)
    enqueue = _swig_new_instance_method(_api.task_arena_enqueue)
    execute = _swig_new_instance_method(_api.task_arena_execute)

# Register task_arena in _api:
_api.task_arena_swigregister(task_arena)
task_arena_current_thread_index = _api.task_arena_current_thread_index

class task_group(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _api.task_group_swiginit(self, _api.new_task_group())
    __swig_destroy__ = _api.delete_task_group
    wait = _swig_new_instance_method(_api.task_group_wait)
    is_canceling = _swig_new_instance_method(_api.task_group_is_canceling)
    cancel = _swig_new_instance_method(_api.task_group_cancel)
    run = _swig_new_instance_method(_api.task_group_run)

# Register task_group in _api:
_api.task_group_swigregister(task_group)

class global_control(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_allowed_parallelism = _api.global_control_max_allowed_parallelism
    thread_stack_size = _api.global_control_thread_stack_size
    parameter_max = _api.global_control_parameter_max

    def __init__(self, param, value):
        _api.global_control_swiginit(self, _api.new_global_control(param, value))
    __swig_destroy__ = _api.delete_global_control
    active_value = _swig_new_static_method(_api.global_control_active_value)

# Register global_control in _api:
_api.global_control_swigregister(global_control)
global_control_active_value = _api.global_control_active_value


default_num_threads = task_scheduler_init_default_num_threads



